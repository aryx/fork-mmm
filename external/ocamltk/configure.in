dnl     This file is an input file used by the GNU "autoconf" program to
dnl     generate the file "configure", which in turn produces the files
dnl     "Makefile.config" and "Makefile.camltk".
dnl	If you don't have autoconf installed, simply use the "configure"
dnl	script.
dnl     Usage: 
dnl	  $ autoconf configure.in > configure
dnl	  edit site.config
dnl       $ ./configure -with-config=site.config
dnl     NOTE: autoconf 2.4 CHOKES on this. Use a newer version (e.g 2.7).

dnl This is the file that must exist in srcdir
AC_INIT(Widgets.src)

dnl Rather use gcc
AC_PROG_CC
AC_PROG_CPP
AC_HAVE_HEADERS(unistd.h limits.h)

dnl Defaults for variables, overriden in site.config
LIBEXT=
INSTALLDIR='$(LIBDIR)/camltk'

dnl We need locations in the first place
AC_ARG_WITH(config,
   [    --with-config=Site specific locations of various software. Check the INSTALL instructions],
   if test -f $withval; then
     SITECFG=$withval
     . $withval
   else
     if test "$withval" = "yes"; then
       AC_MSG_ERROR(No argument for --with-config: write --with-config=<file>.)
     else		
       AC_MSG_ERROR($withval does not exist)
     fi
   fi,
   AC_MSG_ERROR(
You must provide a file giving the location of various software using the option --with-config=file. Check the INSTALL instructions))

if test -z "$OCAMLLIBDIR"; then
  AC_MSG_ERROR("OCAMLLIBDIR is still undefined. Edit $SITECFG")
fi

dnl builtin rule for Cygwin
AC_CYGWIN
if test "$CYGWIN"; then
 echo "CYGWIN=$CYGWIN"
fi

dnl builtin rule for X
AC_PATH_XTRA
if test "$CYGWIN"; then
 WITH_X=""
else
 WITH_X="$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS"
fi

dnl builtin rule for ranlib
AC_PROG_RANLIB

dnl As soon as we use this, we must have install-sh available. Damn.
dnl AC_CANONICAL_HOST

LIBS=""

### We probably need more
AC_CHECK_LIB(dl, dlopen, LIBS="-ldl $LIBS")

# we need to check X11 include path is visible
AC_CHECK_HEADERS(X11/Xlib.h,,
  AC_MSG_ERROR(Can't find Xlib.h. Check the CPPFLAGS variable in $SITECFG))

# ### Check wish
# Grghhh, wish often has another name like wish8.3
# 
# AC_PATH_PROG(PATH_WISH, wish, "nope")
# if test "$PATH_WISH" = "nope"; then
#   AC_MSG_ERROR(Can't find wish in your executable path)
# fi
# 
# TCL_VERSION=`echo 'puts $tcl_version; exit' | $PATH_WISH`
# TK_VERSION=`echo 'puts $tk_version; exit' | $PATH_WISH`
# echo "TCL_VERSION=$TCL_VERSION, TK_VERSION=$TK_VERSION"

### Check for Tcl/Tk include files
AC_CHECKING(Tcl and Tk includes)

AC_CHECK_HEADER(tcl.h,,
  AC_MSG_ERROR(Can't find tcl.h. Check the CPPFLAGS variable in $SITECFG))

# note: sed [ ] are replaced by [[ ]] for the m4 processor
cat > mytest.c <<EOF
#include <tcl.h>
TCL_VERSION
EOF
TCL_VERSION=`$CPP $CPPFLAGS mytest.c | tail -1 | sed -e 's/[[" ]]//g'`
echo TCL_VERSION=$TCL_VERSION
rm -f mytest.c

AC_CHECK_HEADER(tk.h,,
  AC_MSG_ERROR(Can't find tk.h. Check the CPPFLAGS variable in $SITECFG))

cat > mytest.c <<EOF
#include <tk.h>
TK_VERSION
EOF
TK_VERSION=`$CPP $CPPFLAGS mytest.c | tail -1 | sed -e 's/[[" ]]//g'`
echo TK_VERSION=$TK_VERSION
rm -f mytest.c

### TK_PATCH_LEVEL to select version specific features
cat > mytest.c <<EOF
#include <tk.h>
TK_PATCH_LEVEL
EOF
TKPATCHLEVEL=`$CPP $CPPFLAGS mytest.c | tail -1 | sed -e 's/[[". ]]//g'`
echo TKPATCHLEVEL=$TKPATCHLEVEL
rm -f mytest.c

### Check for Tcl/Tk libraries
AC_CHECKING(Tcl and Tk libraries)

TCL_VERSION_WD=`echo $TCL_VERSION | sed -e 's/\.//'`
TK_VERSION_WD=`echo $TK_VERSION | sed -e 's/\.//'`

tcl="tcl$TCL_VERSION_WD$LIBEXT"
tcld="tcl$TCL_VERSION$LIBEXT"
tk="tk$TK_VERSION_WD$LIBEXT"
tkd="tk$TK_VERSION$LIBEXT"

dnl use X_EXTRA_LIBS to get -lnsl and -lsocket on Solaris

AC_CHECK_LIB($tcld, Tcl_Init, LIBS="-l$tcld $LIBS",
  AC_CHECK_LIB($tcl, Tcl_Init, LIBS="-l$tcl $LIBS",
    AC_MSG_ERROR(Can't find a tcl library.
   Check config.log to see what happened, and try setting LDFLAGS in $SITECFG),
  $X_EXTRA_LIBS -lm),
$X_EXTRA_LIBS -lm)

dnl X_CFLAGS is need if includes are not in /usr/include/X11

AC_CHECK_LIB($tkd, Tk_Init, LIBS="-l$tkd $LIBS",
  AC_CHECK_LIB($tk, Tk_Init, LIBS="-l$tk $LIBS",
    AC_MSG_ERROR(Can't find a tk library.
   Check config.log to see what happened, and try setting LDFLAGS in $SITECFG),
  $X_CFLAGS -lm),
$X_CFLAGS -lm)

dnl This is the file that we produce
dnl These are the variables that are substituted in Makefile.config.in to
dnl produce Makefile.config

dnl The OCaml library
AC_SUBST(OCAMLLIBDIR)

dnl Install dir
AC_SUBST(INSTALLDIR)

dnl Info collected about X
dnl The includes and options
AC_SUBST(WITH_X)
AC_SUBST(X_CFLAGS)

dnl The libraries
dnl special trick to substitute -L and -l ...
dnl X link options
AC_SUBST(X_LIBS)

if test -z "$CYGWIN"; then
 THE_X_LIBS="$X_PRE_LIBS -lX11 $X_EXTRA_LIBS -lm"
else
 THE_X_LIBS="-lwsock32 $X_EXTRA_LIBS"
fi

AC_SUBST(THE_X_LIBS)

dnl .exe extension
if test "$CYGWIN"; then
 EXE=".exe"
else
 EXE=""
fi

AC_SUBST(EXE)

dnl Tcl/Tk
dnl CPPFLAGS, LIBS and LDFLAGS are substituted by default

dnl TKPATCHLEVEL is used to select version specific features
AC_SUBST(TKPATCHLEVEL)

dnl Info collected about ranlib
AC_SUBST(RANLIB)
dnl LIBS is subsituted by default
AC_OUTPUT(Makefile.config Makefile.camltk tkanim/ext/Makefile)
